// Code generated by protoc-gen-gogo.
// source: awsAccount.proto
// DO NOT EDIT!

/*
Package models is a generated protocol buffer package.

It is generated from these files:
	awsAccount.proto
	trade.proto

It has these top-level messages:
	AwsAccount
	Trade
	Leger
*/
package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AwsAccount struct {
	ID           *uint32 `protobuf:"varint,1,req,name=ID" json:"id" gorm:"primary_key"`
	AwsAccessKey *string `protobuf:"bytes,2,opt,name=AwsAccessKey" json:"awsAccessKey"`
	AwsSecretKey *string `protobuf:"bytes,3,opt,name=AwsSecretKey" json:"awsSecretKey"`
	// Us East 1
	AwsVpcIdUsEast1             *string `protobuf:"bytes,4,opt,name=AwsVpcIdUsEast1" json:"awsVpcIdUsEast1"`
	AwsSshPrivateKeyUsEast1     *string `protobuf:"bytes,29,opt,name=AwsSshPrivateKeyUsEast1" json:"awsSshPrivateKeyUsEast1" sql:"type:varchar(2048);unique"`
	AwsSecurityGroupNameUsEast1 *string `protobuf:"bytes,5,opt,name=AwsSecurityGroupNameUsEast1" json:"awsSecurityGroupNameUsEast1"`
	AwsSecurityGroupIdUsEast1   *string `protobuf:"bytes,6,opt,name=AwsSecurityGroupIdUsEast1" json:"awsSecurityGroupIdUsEast1"`
	AwsSubnetIdUsEast1A         *string `protobuf:"bytes,7,opt,name=AwsSubnetIdUsEast1a" json:"awsSubnetIdUsEast1a"`
	AwsSubnetIdUsEast1B         *string `protobuf:"bytes,8,opt,name=AwsSubnetIdUsEast1b" json:"awsSubnetIdUsEast1b"`
	AwsSubnetIdUsEast1C         *string `protobuf:"bytes,9,opt,name=AwsSubnetIdUsEast1c" json:"awsSubnetIdUsEast1c"`
	AwsSubnetIdUsEast1D         *string `protobuf:"bytes,10,opt,name=AwsSubnetIdUsEast1d" json:"awsSubnetIdUsEast1d"`
	AwsSubnetIdUsEast1E         *string `protobuf:"bytes,11,opt,name=AwsSubnetIdUsEast1e" json:"awsSubnetIdUsEast1e"`
	// Us West 1
	AwsVpcIdUsWest1             *string `protobuf:"bytes,12,opt,name=AwsVpcIdUsWest1" json:"awsVpcIdUsWest1"`
	AwsSshPrivateKeyUsWest1     *string `protobuf:"bytes,30,opt,name=AwsSshPrivateKeyUsWest1" json:"awsSshPrivateKeyUsWest1" sql:"type:varchar(2048);unique"`
	AwsSecurityGroupNameUsWest1 *string `protobuf:"bytes,13,opt,name=AwsSecurityGroupNameUsWest1" json:"awsSecurityGroupNameUsWest1"`
	AwsSecurityGroupIdUsWest1   *string `protobuf:"bytes,14,opt,name=AwsSecurityGroupIdUsWest1" json:"awsSecurityGroupIdUsWest1"`
	AwsSubnetIdUsWest1A         *string `protobuf:"bytes,15,opt,name=AwsSubnetIdUsWest1a" json:"awsSubnetIdUsWest1a"`
	AwsSubnetIdUsWest1B         *string `protobuf:"bytes,16,opt,name=AwsSubnetIdUsWest1b" json:"awsSubnetIdUsWest1b"`
	AwsSubnetIdUsWest1C         *string `protobuf:"bytes,17,opt,name=AwsSubnetIdUsWest1c" json:"awsSubnetIdUsWest1c"`
	AwsSubnetIdUsWest1D         *string `protobuf:"bytes,18,opt,name=AwsSubnetIdUsWest1d" json:"awsSubnetIdUsWest1d"`
	AwsSubnetIdUsWest1E         *string `protobuf:"bytes,19,opt,name=AwsSubnetIdUsWest1e" json:"awsSubnetIdUsWest1e"`
	// Us West 2
	AwsVpcIdUsWest2             *string `protobuf:"bytes,20,opt,name=AwsVpcIdUsWest2" json:"awsVpcIdUsWest2"`
	AwsSshPrivateKeyUsWest2     *string `protobuf:"bytes,31,opt,name=AwsSshPrivateKeyUsWest2" json:"awsSshPrivateKeyUsWest2" sql:"type:varchar(2048);unique"`
	AwsSecurityGroupNameUsWest2 *string `protobuf:"bytes,21,opt,name=AwsSecurityGroupNameUsWest2" json:"awsSecurityGroupNameUsWest2"`
	AwsSecurityGroupIdUsWest2   *string `protobuf:"bytes,22,opt,name=AwsSecurityGroupIdUsWest2" json:"awsSecurityGroupIdUsWest2"`
	AwsSubnetIdUsWest2A         *string `protobuf:"bytes,23,opt,name=AwsSubnetIdUsWest2a" json:"awsSubnetIdUsWest2a"`
	AwsSubnetIdUsWest2B         *string `protobuf:"bytes,24,opt,name=AwsSubnetIdUsWest2b" json:"awsSubnetIdUsWest2b"`
	AwsSubnetIdUsWest2C         *string `protobuf:"bytes,25,opt,name=AwsSubnetIdUsWest2c" json:"awsSubnetIdUsWest2c"`
	AwsSubnetIdUsWest2D         *string `protobuf:"bytes,26,opt,name=AwsSubnetIdUsWest2d" json:"awsSubnetIdUsWest2d"`
	AwsSubnetIdUsWest2E         *string `protobuf:"bytes,27,opt,name=AwsSubnetIdUsWest2e" json:"awsSubnetIdUsWest2e"`
	// Errors
	Error            *string `protobuf:"bytes,28,opt,name=Error" json:"error"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AwsAccount) Reset()         { *m = AwsAccount{} }
func (m *AwsAccount) String() string { return proto.CompactTextString(m) }
func (*AwsAccount) ProtoMessage()    {}

func (m *AwsAccount) GetID() uint32 {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return 0
}

func (m *AwsAccount) GetAwsAccessKey() string {
	if m != nil && m.AwsAccessKey != nil {
		return *m.AwsAccessKey
	}
	return ""
}

func (m *AwsAccount) GetAwsSecretKey() string {
	if m != nil && m.AwsSecretKey != nil {
		return *m.AwsSecretKey
	}
	return ""
}

func (m *AwsAccount) GetAwsVpcIdUsEast1() string {
	if m != nil && m.AwsVpcIdUsEast1 != nil {
		return *m.AwsVpcIdUsEast1
	}
	return ""
}

func (m *AwsAccount) GetAwsSshPrivateKeyUsEast1() string {
	if m != nil && m.AwsSshPrivateKeyUsEast1 != nil {
		return *m.AwsSshPrivateKeyUsEast1
	}
	return ""
}

func (m *AwsAccount) GetAwsSecurityGroupNameUsEast1() string {
	if m != nil && m.AwsSecurityGroupNameUsEast1 != nil {
		return *m.AwsSecurityGroupNameUsEast1
	}
	return ""
}

func (m *AwsAccount) GetAwsSecurityGroupIdUsEast1() string {
	if m != nil && m.AwsSecurityGroupIdUsEast1 != nil {
		return *m.AwsSecurityGroupIdUsEast1
	}
	return ""
}

func (m *AwsAccount) GetAwsSubnetIdUsEast1A() string {
	if m != nil && m.AwsSubnetIdUsEast1A != nil {
		return *m.AwsSubnetIdUsEast1A
	}
	return ""
}

func (m *AwsAccount) GetAwsSubnetIdUsEast1B() string {
	if m != nil && m.AwsSubnetIdUsEast1B != nil {
		return *m.AwsSubnetIdUsEast1B
	}
	return ""
}

func (m *AwsAccount) GetAwsSubnetIdUsEast1C() string {
	if m != nil && m.AwsSubnetIdUsEast1C != nil {
		return *m.AwsSubnetIdUsEast1C
	}
	return ""
}

func (m *AwsAccount) GetAwsSubnetIdUsEast1D() string {
	if m != nil && m.AwsSubnetIdUsEast1D != nil {
		return *m.AwsSubnetIdUsEast1D
	}
	return ""
}

func (m *AwsAccount) GetAwsSubnetIdUsEast1E() string {
	if m != nil && m.AwsSubnetIdUsEast1E != nil {
		return *m.AwsSubnetIdUsEast1E
	}
	return ""
}

func (m *AwsAccount) GetAwsVpcIdUsWest1() string {
	if m != nil && m.AwsVpcIdUsWest1 != nil {
		return *m.AwsVpcIdUsWest1
	}
	return ""
}

func (m *AwsAccount) GetAwsSshPrivateKeyUsWest1() string {
	if m != nil && m.AwsSshPrivateKeyUsWest1 != nil {
		return *m.AwsSshPrivateKeyUsWest1
	}
	return ""
}

func (m *AwsAccount) GetAwsSecurityGroupNameUsWest1() string {
	if m != nil && m.AwsSecurityGroupNameUsWest1 != nil {
		return *m.AwsSecurityGroupNameUsWest1
	}
	return ""
}

func (m *AwsAccount) GetAwsSecurityGroupIdUsWest1() string {
	if m != nil && m.AwsSecurityGroupIdUsWest1 != nil {
		return *m.AwsSecurityGroupIdUsWest1
	}
	return ""
}

func (m *AwsAccount) GetAwsSubnetIdUsWest1A() string {
	if m != nil && m.AwsSubnetIdUsWest1A != nil {
		return *m.AwsSubnetIdUsWest1A
	}
	return ""
}

func (m *AwsAccount) GetAwsSubnetIdUsWest1B() string {
	if m != nil && m.AwsSubnetIdUsWest1B != nil {
		return *m.AwsSubnetIdUsWest1B
	}
	return ""
}

func (m *AwsAccount) GetAwsSubnetIdUsWest1C() string {
	if m != nil && m.AwsSubnetIdUsWest1C != nil {
		return *m.AwsSubnetIdUsWest1C
	}
	return ""
}

func (m *AwsAccount) GetAwsSubnetIdUsWest1D() string {
	if m != nil && m.AwsSubnetIdUsWest1D != nil {
		return *m.AwsSubnetIdUsWest1D
	}
	return ""
}

func (m *AwsAccount) GetAwsSubnetIdUsWest1E() string {
	if m != nil && m.AwsSubnetIdUsWest1E != nil {
		return *m.AwsSubnetIdUsWest1E
	}
	return ""
}

func (m *AwsAccount) GetAwsVpcIdUsWest2() string {
	if m != nil && m.AwsVpcIdUsWest2 != nil {
		return *m.AwsVpcIdUsWest2
	}
	return ""
}

func (m *AwsAccount) GetAwsSshPrivateKeyUsWest2() string {
	if m != nil && m.AwsSshPrivateKeyUsWest2 != nil {
		return *m.AwsSshPrivateKeyUsWest2
	}
	return ""
}

func (m *AwsAccount) GetAwsSecurityGroupNameUsWest2() string {
	if m != nil && m.AwsSecurityGroupNameUsWest2 != nil {
		return *m.AwsSecurityGroupNameUsWest2
	}
	return ""
}

func (m *AwsAccount) GetAwsSecurityGroupIdUsWest2() string {
	if m != nil && m.AwsSecurityGroupIdUsWest2 != nil {
		return *m.AwsSecurityGroupIdUsWest2
	}
	return ""
}

func (m *AwsAccount) GetAwsSubnetIdUsWest2A() string {
	if m != nil && m.AwsSubnetIdUsWest2A != nil {
		return *m.AwsSubnetIdUsWest2A
	}
	return ""
}

func (m *AwsAccount) GetAwsSubnetIdUsWest2B() string {
	if m != nil && m.AwsSubnetIdUsWest2B != nil {
		return *m.AwsSubnetIdUsWest2B
	}
	return ""
}

func (m *AwsAccount) GetAwsSubnetIdUsWest2C() string {
	if m != nil && m.AwsSubnetIdUsWest2C != nil {
		return *m.AwsSubnetIdUsWest2C
	}
	return ""
}

func (m *AwsAccount) GetAwsSubnetIdUsWest2D() string {
	if m != nil && m.AwsSubnetIdUsWest2D != nil {
		return *m.AwsSubnetIdUsWest2D
	}
	return ""
}

func (m *AwsAccount) GetAwsSubnetIdUsWest2E() string {
	if m != nil && m.AwsSubnetIdUsWest2E != nil {
		return *m.AwsSubnetIdUsWest2E
	}
	return ""
}

func (m *AwsAccount) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*AwsAccount)(nil), "models.AwsAccount")
}
func NewPopulatedAwsAccount(r randyAwsAccount, easy bool) *AwsAccount {
	this := &AwsAccount{}
	v1 := uint32(r.Uint32())
	this.ID = &v1
	if r.Intn(10) != 0 {
		v2 := randStringAwsAccount(r)
		this.AwsAccessKey = &v2
	}
	if r.Intn(10) != 0 {
		v3 := randStringAwsAccount(r)
		this.AwsSecretKey = &v3
	}
	if r.Intn(10) != 0 {
		v4 := randStringAwsAccount(r)
		this.AwsVpcIdUsEast1 = &v4
	}
	if r.Intn(10) != 0 {
		v5 := randStringAwsAccount(r)
		this.AwsSshPrivateKeyUsEast1 = &v5
	}
	if r.Intn(10) != 0 {
		v6 := randStringAwsAccount(r)
		this.AwsSecurityGroupNameUsEast1 = &v6
	}
	if r.Intn(10) != 0 {
		v7 := randStringAwsAccount(r)
		this.AwsSecurityGroupIdUsEast1 = &v7
	}
	if r.Intn(10) != 0 {
		v8 := randStringAwsAccount(r)
		this.AwsSubnetIdUsEast1A = &v8
	}
	if r.Intn(10) != 0 {
		v9 := randStringAwsAccount(r)
		this.AwsSubnetIdUsEast1B = &v9
	}
	if r.Intn(10) != 0 {
		v10 := randStringAwsAccount(r)
		this.AwsSubnetIdUsEast1C = &v10
	}
	if r.Intn(10) != 0 {
		v11 := randStringAwsAccount(r)
		this.AwsSubnetIdUsEast1D = &v11
	}
	if r.Intn(10) != 0 {
		v12 := randStringAwsAccount(r)
		this.AwsSubnetIdUsEast1E = &v12
	}
	if r.Intn(10) != 0 {
		v13 := randStringAwsAccount(r)
		this.AwsVpcIdUsWest1 = &v13
	}
	if r.Intn(10) != 0 {
		v14 := randStringAwsAccount(r)
		this.AwsSshPrivateKeyUsWest1 = &v14
	}
	if r.Intn(10) != 0 {
		v15 := randStringAwsAccount(r)
		this.AwsSecurityGroupNameUsWest1 = &v15
	}
	if r.Intn(10) != 0 {
		v16 := randStringAwsAccount(r)
		this.AwsSecurityGroupIdUsWest1 = &v16
	}
	if r.Intn(10) != 0 {
		v17 := randStringAwsAccount(r)
		this.AwsSubnetIdUsWest1A = &v17
	}
	if r.Intn(10) != 0 {
		v18 := randStringAwsAccount(r)
		this.AwsSubnetIdUsWest1B = &v18
	}
	if r.Intn(10) != 0 {
		v19 := randStringAwsAccount(r)
		this.AwsSubnetIdUsWest1C = &v19
	}
	if r.Intn(10) != 0 {
		v20 := randStringAwsAccount(r)
		this.AwsSubnetIdUsWest1D = &v20
	}
	if r.Intn(10) != 0 {
		v21 := randStringAwsAccount(r)
		this.AwsSubnetIdUsWest1E = &v21
	}
	if r.Intn(10) != 0 {
		v22 := randStringAwsAccount(r)
		this.AwsVpcIdUsWest2 = &v22
	}
	if r.Intn(10) != 0 {
		v23 := randStringAwsAccount(r)
		this.AwsSshPrivateKeyUsWest2 = &v23
	}
	if r.Intn(10) != 0 {
		v24 := randStringAwsAccount(r)
		this.AwsSecurityGroupNameUsWest2 = &v24
	}
	if r.Intn(10) != 0 {
		v25 := randStringAwsAccount(r)
		this.AwsSecurityGroupIdUsWest2 = &v25
	}
	if r.Intn(10) != 0 {
		v26 := randStringAwsAccount(r)
		this.AwsSubnetIdUsWest2A = &v26
	}
	if r.Intn(10) != 0 {
		v27 := randStringAwsAccount(r)
		this.AwsSubnetIdUsWest2B = &v27
	}
	if r.Intn(10) != 0 {
		v28 := randStringAwsAccount(r)
		this.AwsSubnetIdUsWest2C = &v28
	}
	if r.Intn(10) != 0 {
		v29 := randStringAwsAccount(r)
		this.AwsSubnetIdUsWest2D = &v29
	}
	if r.Intn(10) != 0 {
		v30 := randStringAwsAccount(r)
		this.AwsSubnetIdUsWest2E = &v30
	}
	if r.Intn(10) != 0 {
		v31 := randStringAwsAccount(r)
		this.Error = &v31
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAwsAccount(r, 32)
	}
	return this
}

type randyAwsAccount interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneAwsAccount(r randyAwsAccount) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringAwsAccount(r randyAwsAccount) string {
	v32 := r.Intn(100)
	tmps := make([]rune, v32)
	for i := 0; i < v32; i++ {
		tmps[i] = randUTF8RuneAwsAccount(r)
	}
	return string(tmps)
}
func randUnrecognizedAwsAccount(r randyAwsAccount, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldAwsAccount(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldAwsAccount(data []byte, r randyAwsAccount, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateAwsAccount(data, uint64(key))
		v33 := r.Int63()
		if r.Intn(2) == 0 {
			v33 *= -1
		}
		data = encodeVarintPopulateAwsAccount(data, uint64(v33))
	case 1:
		data = encodeVarintPopulateAwsAccount(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateAwsAccount(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateAwsAccount(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateAwsAccount(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateAwsAccount(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
